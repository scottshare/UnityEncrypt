<Overview>
  <Assemblies>
    <Assembly Name="System.Core" Version="3.5.0.0">
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(System.Runtime.CompilerServices.CompilationRelaxations.NoStringInterning)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.StringFreezing</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.DefaultDependency(System.Runtime.CompilerServices.LoadHint.Always)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.AllowPartiallyTrustedCallers</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("3.5.21022.8")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("3.5.21022.8")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("3.5.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("(c) various MONO Authors")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("MONO Common language infrastructure")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("MONO development team")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDefaultAlias("System.Core.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("System.Core.dll")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("System.Core.dll")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
  </Assemblies>
  <Remarks>To be added.</Remarks>
  <Copyright>To be added.</Copyright>
  <Types>
    <Namespace Name="Mono.Security.Cryptography">
      <Type Name="BlockProcessor" Kind="Class" />
      <Type Name="KeyBuilder" Kind="Class" />
    </Namespace>
    <Namespace Name="System">
      <Type Name="Action" Kind="Delegate" />
      <Type Name="Action`2" DisplayName="Action&lt;T1,T2&gt;" Kind="Delegate" />
      <Type Name="Action`3" DisplayName="Action&lt;T1,T2,T3&gt;" Kind="Delegate" />
      <Type Name="Action`4" DisplayName="Action&lt;T1,T2,T3,T4&gt;" Kind="Delegate" />
      <Type Name="Func`1" DisplayName="Func&lt;TResult&gt;" Kind="Delegate" />
      <Type Name="Func`2" DisplayName="Func&lt;T,TResult&gt;" Kind="Delegate" />
      <Type Name="Func`3" DisplayName="Func&lt;T1,T2,TResult&gt;" Kind="Delegate" />
      <Type Name="Func`4" DisplayName="Func&lt;T1,T2,T3,TResult&gt;" Kind="Delegate" />
      <Type Name="Func`5" DisplayName="Func&lt;T1,T2,T3,T4,TResult&gt;" Kind="Delegate" />
      <Type Name="InvalidTimeZoneException" Kind="Class" />
      <Type Name="TimeZoneInfo" Kind="Class" />
      <Type Name="TimeZoneInfo+AdjustmentRule" Kind="Class" />
      <Type Name="TimeZoneInfo+TransitionTime" Kind="Structure" />
      <Type Name="TimeZoneNotFoundException" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Collections.Generic">
      <Type Name="HashSet`1" DisplayName="HashSet&lt;T&gt;" Kind="Class" />
      <Type Name="HashSet`1+Enumerator" DisplayName="HashSet&lt;T&gt;+Enumerator" Kind="Structure" />
    </Namespace>
    <Namespace Name="System.Linq">
      <Type Name="Enumerable" Kind="Class" />
      <Type Name="IGrouping`2" DisplayName="IGrouping&lt;TKey,TElement&gt;" Kind="Interface" />
      <Type Name="ILookup`2" DisplayName="ILookup&lt;TKey,TElement&gt;" Kind="Interface" />
      <Type Name="IOrderedEnumerable`1" DisplayName="IOrderedEnumerable&lt;TElement&gt;" Kind="Interface" />
      <Type Name="IOrderedQueryable" Kind="Interface" />
      <Type Name="IOrderedQueryable`1" DisplayName="IOrderedQueryable&lt;T&gt;" Kind="Interface" />
      <Type Name="IQueryable" Kind="Interface" />
      <Type Name="IQueryable`1" DisplayName="IQueryable&lt;T&gt;" Kind="Interface" />
      <Type Name="IQueryProvider" Kind="Interface" />
      <Type Name="Lookup`2" DisplayName="Lookup&lt;TKey,TElement&gt;" Kind="Class" />
      <Type Name="Queryable" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Linq.Expressions">
      <Type Name="BinaryExpression" Kind="Class" />
      <Type Name="ConditionalExpression" Kind="Class" />
      <Type Name="ConstantExpression" Kind="Class" />
      <Type Name="ElementInit" Kind="Class" />
      <Type Name="Expression" Kind="Class" />
      <Type Name="Expression`1" DisplayName="Expression&lt;TDelegate&gt;" Kind="Class" />
      <Type Name="ExpressionType" Kind="Enumeration" />
      <Type Name="InvocationExpression" Kind="Class" />
      <Type Name="LambdaExpression" Kind="Class" />
      <Type Name="ListInitExpression" Kind="Class" />
      <Type Name="MemberAssignment" Kind="Class" />
      <Type Name="MemberBinding" Kind="Class" />
      <Type Name="MemberBindingType" Kind="Enumeration" />
      <Type Name="MemberExpression" Kind="Class" />
      <Type Name="MemberInitExpression" Kind="Class" />
      <Type Name="MemberListBinding" Kind="Class" />
      <Type Name="MemberMemberBinding" Kind="Class" />
      <Type Name="MethodCallExpression" Kind="Class" />
      <Type Name="NewArrayExpression" Kind="Class" />
      <Type Name="NewExpression" Kind="Class" />
      <Type Name="ParameterExpression" Kind="Class" />
      <Type Name="TypeBinaryExpression" Kind="Class" />
      <Type Name="UnaryExpression" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Runtime.CompilerServices">
      <Type Name="ExecutionScope" Kind="Class" />
      <Type Name="ExtensionAttribute" Kind="Class" />
      <Type Name="IStrongBox" Kind="Interface" />
      <Type Name="StrongBox`1" DisplayName="StrongBox&lt;T&gt;" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Security.Cryptography">
      <Type Name="Aes" Kind="Class" />
      <Type Name="AesCryptoServiceProvider" Kind="Class" />
      <Type Name="AesManaged" Kind="Class" />
      <Type Name="CngAlgorithm" Kind="Class" />
      <Type Name="CngAlgorithmGroup" Kind="Class" />
      <Type Name="MD5Cng" Kind="Class" />
      <Type Name="SHA1Cng" Kind="Class" />
      <Type Name="SHA256Cng" Kind="Class" />
      <Type Name="SHA256CryptoServiceProvider" Kind="Class" />
      <Type Name="SHA384Cng" Kind="Class" />
      <Type Name="SHA384CryptoServiceProvider" Kind="Class" />
      <Type Name="SHA512Cng" Kind="Class" />
      <Type Name="SHA512CryptoServiceProvider" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Threading">
      <Type Name="LockRecursionException" Kind="Class" />
      <Type Name="LockRecursionPolicy" Kind="Enumeration" />
    </Namespace>
  </Types>
  <Title>System.Core</Title>
  <ExtensionMethods>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Aggregate&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource Aggregate&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TSource,TSource&gt; func);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="func" Type="System.Func&lt;TSource,TSource,TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="func">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Aggregate&lt;TSource,TAccumulate&gt;">
        <MemberSignature Language="C#" Value="public static TAccumulate Aggregate&lt;TSource,TAccumulate&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TAccumulate seed, Func&lt;TAccumulate,TSource,TAccumulate&gt; func);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TAccumulate</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="seed" Type="TAccumulate" />
          <Parameter Name="func" Type="System.Func&lt;TAccumulate,TSource,TAccumulate&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TAccumulate">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="seed">To be added.</param>
          <param name="func">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TAccumulate" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Aggregate&lt;TSource,TAccumulate,TResult&gt;">
        <MemberSignature Language="C#" Value="public static TResult Aggregate&lt;TSource,TAccumulate,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TAccumulate seed, Func&lt;TAccumulate,TSource,TAccumulate&gt; func, Func&lt;TAccumulate,TResult&gt; resultSelector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TResult</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="seed" Type="TAccumulate" />
          <Parameter Name="func" Type="System.Func&lt;TAccumulate,TSource,TAccumulate&gt;" />
          <Parameter Name="resultSelector" Type="System.Func&lt;TAccumulate,TResult&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TAccumulate">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="seed">To be added.</param>
          <param name="func">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TAccumulate" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="All&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static bool All&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Any&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static bool Any&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Any&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static bool Any&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="AsEnumerable&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; AsEnumerable&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature Language="C#" Value="public static decimal Average (this System.Collections.Generic.IEnumerable&lt;decimal&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Decimal</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Decimal&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature Language="C#" Value="public static double Average (this System.Collections.Generic.IEnumerable&lt;double&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Double&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature Language="C#" Value="public static double Average (this System.Collections.Generic.IEnumerable&lt;int&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature Language="C#" Value="public static double Average (this System.Collections.Generic.IEnumerable&lt;long&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int64&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Average (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;decimal&gt;&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Decimal&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;double&gt;&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Double&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;int&gt;&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int32&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;long&gt;&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int64&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Average (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;float&gt;&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Single&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature Language="C#" Value="public static float Average (this System.Collections.Generic.IEnumerable&lt;float&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Single</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Single&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Average&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static decimal Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,decimal&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Decimal</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Decimal&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Average&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static double Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,double&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Double&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Average&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static double Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Average&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static double Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,long&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int64&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Average&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;decimal&gt;&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Decimal&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Average&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;double&gt;&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Double&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Average&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;int&gt;&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int32&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Average&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;long&gt;&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int64&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Average&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;float&gt;&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Single&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Average&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static float Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,float&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Single</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Single&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.IEnumerable" />
      </Targets>
      <Member MemberName="Cast&lt;TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Cast&lt;TResult&gt; (this System.Collections.IEnumerable source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.IEnumerable" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Concat&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Concat&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Contains&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static bool Contains&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TSource value);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="value" Type="TSource" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Contains&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static bool Contains&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TSource value, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="value" Type="TSource" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="value">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Count&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static int Count&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Count&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static int Count&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="DefaultIfEmpty&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; DefaultIfEmpty&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="DefaultIfEmpty&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; DefaultIfEmpty&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TSource defaultValue);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="defaultValue" Type="TSource" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="defaultValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Distinct&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Distinct&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Distinct&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Distinct&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="ElementAt&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource ElementAt&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, int index);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="index" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="index">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="ElementAtOrDefault&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource ElementAtOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, int index);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="index" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="index">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Except&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Except&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Except&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Except&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="First&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource First&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="First&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource First&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="FirstOrDefault&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource FirstOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="FirstOrDefault&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource FirstOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="GroupBy&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt; GroupBy&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="GroupBy&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt; GroupBy&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="GroupBy&lt;TSource,TKey,TElement&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt; GroupBy&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TElement">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="elementSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TElement" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="GroupBy&lt;TSource,TKey,TElement&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt; GroupBy&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TElement">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="elementSelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TElement" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="GroupBy&lt;TSource,TKey,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupBy&lt;TSource,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TSource&gt;,TResult&gt; resultSelector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="resultSelector" Type="System.Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TSource&gt;,TResult&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="GroupBy&lt;TSource,TKey,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupBy&lt;TSource,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TSource&gt;,TResult&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="resultSelector" Type="System.Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TSource&gt;,TResult&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="GroupBy&lt;TSource,TKey,TElement,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupBy&lt;TSource,TKey,TElement,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,TResult&gt; resultSelector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
          <Parameter Name="resultSelector" Type="System.Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,TResult&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TElement">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="elementSelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TElement" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="GroupBy&lt;TSource,TKey,TElement,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupBy&lt;TSource,TKey,TElement,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,TResult&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
          <Parameter Name="resultSelector" Type="System.Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,TResult&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TElement">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="elementSelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TElement" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="GroupJoin&lt;TOuter,TInner,TKey,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupJoin&lt;TOuter,TInner,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TOuter&gt; outer, System.Collections.Generic.IEnumerable&lt;TInner&gt; inner, Func&lt;TOuter,TKey&gt; outerKeySelector, Func&lt;TInner,TKey&gt; innerKeySelector, Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt; resultSelector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="outer" Type="System.Collections.Generic.IEnumerable&lt;TOuter&gt;" RefType="this" />
          <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable&lt;TInner&gt;" />
          <Parameter Name="outerKeySelector" Type="System.Func&lt;TOuter,TKey&gt;" />
          <Parameter Name="innerKeySelector" Type="System.Func&lt;TInner,TKey&gt;" />
          <Parameter Name="resultSelector" Type="System.Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TOuter">To be added.</typeparam>
          <typeparam name="TInner">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="outer">To be added.</param>
          <param name="inner">To be added.</param>
          <param name="outerKeySelector">To be added.</param>
          <param name="innerKeySelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TOuter" />
          <TypeParameter Name="TInner" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="GroupJoin&lt;TOuter,TInner,TKey,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupJoin&lt;TOuter,TInner,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TOuter&gt; outer, System.Collections.Generic.IEnumerable&lt;TInner&gt; inner, Func&lt;TOuter,TKey&gt; outerKeySelector, Func&lt;TInner,TKey&gt; innerKeySelector, Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="outer" Type="System.Collections.Generic.IEnumerable&lt;TOuter&gt;" RefType="this" />
          <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable&lt;TInner&gt;" />
          <Parameter Name="outerKeySelector" Type="System.Func&lt;TOuter,TKey&gt;" />
          <Parameter Name="innerKeySelector" Type="System.Func&lt;TInner,TKey&gt;" />
          <Parameter Name="resultSelector" Type="System.Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TOuter">To be added.</typeparam>
          <typeparam name="TInner">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="outer">To be added.</param>
          <param name="inner">To be added.</param>
          <param name="outerKeySelector">To be added.</param>
          <param name="innerKeySelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TOuter" />
          <TypeParameter Name="TInner" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Intersect&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Intersect&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Intersect&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Intersect&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Join&lt;TOuter,TInner,TKey,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Join&lt;TOuter,TInner,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TOuter&gt; outer, System.Collections.Generic.IEnumerable&lt;TInner&gt; inner, Func&lt;TOuter,TKey&gt; outerKeySelector, Func&lt;TInner,TKey&gt; innerKeySelector, Func&lt;TOuter,TInner,TResult&gt; resultSelector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="outer" Type="System.Collections.Generic.IEnumerable&lt;TOuter&gt;" RefType="this" />
          <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable&lt;TInner&gt;" />
          <Parameter Name="outerKeySelector" Type="System.Func&lt;TOuter,TKey&gt;" />
          <Parameter Name="innerKeySelector" Type="System.Func&lt;TInner,TKey&gt;" />
          <Parameter Name="resultSelector" Type="System.Func&lt;TOuter,TInner,TResult&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TOuter">To be added.</typeparam>
          <typeparam name="TInner">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="outer">To be added.</param>
          <param name="inner">To be added.</param>
          <param name="outerKeySelector">To be added.</param>
          <param name="innerKeySelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TOuter" />
          <TypeParameter Name="TInner" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Join&lt;TOuter,TInner,TKey,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Join&lt;TOuter,TInner,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TOuter&gt; outer, System.Collections.Generic.IEnumerable&lt;TInner&gt; inner, Func&lt;TOuter,TKey&gt; outerKeySelector, Func&lt;TInner,TKey&gt; innerKeySelector, Func&lt;TOuter,TInner,TResult&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="outer" Type="System.Collections.Generic.IEnumerable&lt;TOuter&gt;" RefType="this" />
          <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable&lt;TInner&gt;" />
          <Parameter Name="outerKeySelector" Type="System.Func&lt;TOuter,TKey&gt;" />
          <Parameter Name="innerKeySelector" Type="System.Func&lt;TInner,TKey&gt;" />
          <Parameter Name="resultSelector" Type="System.Func&lt;TOuter,TInner,TResult&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TOuter">To be added.</typeparam>
          <typeparam name="TInner">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="outer">To be added.</param>
          <param name="inner">To be added.</param>
          <param name="outerKeySelector">To be added.</param>
          <param name="innerKeySelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TOuter" />
          <TypeParameter Name="TInner" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Last&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource Last&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Last&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource Last&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="LastOrDefault&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource LastOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="LastOrDefault&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource LastOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="LongCount&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static long LongCount&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int64</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="LongCount&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static long LongCount&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int64</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max">
        <MemberSignature Language="C#" Value="public static decimal Max (this System.Collections.Generic.IEnumerable&lt;decimal&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Decimal</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Decimal&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max">
        <MemberSignature Language="C#" Value="public static double Max (this System.Collections.Generic.IEnumerable&lt;double&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Double&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max">
        <MemberSignature Language="C#" Value="public static int Max (this System.Collections.Generic.IEnumerable&lt;int&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max">
        <MemberSignature Language="C#" Value="public static long Max (this System.Collections.Generic.IEnumerable&lt;long&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int64</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int64&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max">
        <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Max (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;decimal&gt;&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Decimal&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max">
        <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Max (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;double&gt;&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Double&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max">
        <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; Max (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;int&gt;&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int32&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max">
        <MemberSignature Language="C#" Value="public static Nullable&lt;long&gt; Max (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;long&gt;&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int64&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max">
        <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Max (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;float&gt;&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Single&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max">
        <MemberSignature Language="C#" Value="public static float Max (this System.Collections.Generic.IEnumerable&lt;float&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Single</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Single&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static decimal Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,decimal&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Decimal</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Decimal&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static double Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,double&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Double&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static int Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static long Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,long&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int64</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int64&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;decimal&gt;&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Decimal&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;double&gt;&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Double&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;int&gt;&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int32&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;long&gt; Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;long&gt;&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int64&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;float&gt;&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Single&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static float Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,float&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Single</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Single&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Max&lt;TSource,TResult&gt;">
        <MemberSignature Language="C#" Value="public static TResult Max&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TResult&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TResult</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,TResult&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min">
        <MemberSignature Language="C#" Value="public static decimal Min (this System.Collections.Generic.IEnumerable&lt;decimal&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Decimal</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Decimal&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min">
        <MemberSignature Language="C#" Value="public static double Min (this System.Collections.Generic.IEnumerable&lt;double&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Double&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min">
        <MemberSignature Language="C#" Value="public static int Min (this System.Collections.Generic.IEnumerable&lt;int&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min">
        <MemberSignature Language="C#" Value="public static long Min (this System.Collections.Generic.IEnumerable&lt;long&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int64</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int64&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min">
        <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Min (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;decimal&gt;&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Decimal&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min">
        <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Min (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;double&gt;&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Double&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min">
        <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; Min (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;int&gt;&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int32&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min">
        <MemberSignature Language="C#" Value="public static Nullable&lt;long&gt; Min (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;long&gt;&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int64&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min">
        <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Min (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;float&gt;&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Single&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min">
        <MemberSignature Language="C#" Value="public static float Min (this System.Collections.Generic.IEnumerable&lt;float&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Single</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Single&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static decimal Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,decimal&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Decimal</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Decimal&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static double Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,double&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Double&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static int Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static long Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,long&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int64</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int64&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;decimal&gt;&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Decimal&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;double&gt;&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Double&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;int&gt;&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int32&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;long&gt; Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;long&gt;&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int64&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;float&gt;&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Single&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static float Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,float&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Single</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Single&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Min&lt;TSource,TResult&gt;">
        <MemberSignature Language="C#" Value="public static TResult Min&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TResult&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TResult</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,TResult&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.IEnumerable" />
      </Targets>
      <Member MemberName="OfType&lt;TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; OfType&lt;TResult&gt; (this System.Collections.IEnumerable source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.IEnumerable" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="OrderBy&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; OrderBy&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="OrderBy&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; OrderBy&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="OrderByDescending&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; OrderByDescending&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="OrderByDescending&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; OrderByDescending&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Reverse&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Reverse&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Select&lt;TSource,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Select&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TResult&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,TResult&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Select&lt;TSource,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Select&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,TResult&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32,TResult&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="SelectMany&lt;TSource,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; SelectMany&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="SelectMany&lt;TSource,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; SelectMany&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="SelectMany&lt;TSource,TCollection,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; SelectMany&lt;TSource,TCollection,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt; collectionSelector, Func&lt;TSource,TCollection,TResult&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="collectionSelector" Type="System.Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt;" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,TCollection,TResult&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TCollection">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="collectionSelector">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TCollection" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="SelectMany&lt;TSource,TCollection,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; SelectMany&lt;TSource,TCollection,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt; collectionSelector, Func&lt;TSource,TCollection,TResult&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="collectionSelector" Type="System.Func&lt;TSource,System.Int32,System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt;" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,TCollection,TResult&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TCollection">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="collectionSelector">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TCollection" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="SequenceEqual&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static bool SequenceEqual&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="SequenceEqual&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static bool SequenceEqual&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Single&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource Single&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Single&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource Single&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="SingleOrDefault&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource SingleOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="SingleOrDefault&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource SingleOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Skip&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Skip&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, int count);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="count" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="count">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="SkipWhile&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; SkipWhile&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="SkipWhile&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; SkipWhile&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,bool&gt; predicate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Int32,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature Language="C#" Value="public static decimal Sum (this System.Collections.Generic.IEnumerable&lt;decimal&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Decimal</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Decimal&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature Language="C#" Value="public static double Sum (this System.Collections.Generic.IEnumerable&lt;double&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Double&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature Language="C#" Value="public static int Sum (this System.Collections.Generic.IEnumerable&lt;int&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature Language="C#" Value="public static long Sum (this System.Collections.Generic.IEnumerable&lt;long&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int64</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int64&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Sum (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;decimal&gt;&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Decimal&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Sum (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;double&gt;&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Double&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; Sum (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;int&gt;&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int32&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature Language="C#" Value="public static Nullable&lt;long&gt; Sum (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;long&gt;&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int64&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Sum (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;float&gt;&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Single&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature Language="C#" Value="public static float Sum (this System.Collections.Generic.IEnumerable&lt;float&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Single</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Single&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sum&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static decimal Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,decimal&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Decimal</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Decimal&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sum&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static double Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,double&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Double&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sum&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static int Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sum&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static long Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,long&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int64</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int64&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sum&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;decimal&gt;&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Decimal&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sum&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;double&gt;&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Double&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sum&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;int&gt;&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int32&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sum&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;long&gt; Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;long&gt;&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int64&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sum&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;float&gt;&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Single&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Sum&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static float Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,float&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Single</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;TSource,System.Single&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Take&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Take&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, int count);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="count" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="count">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="TakeWhile&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; TakeWhile&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="TakeWhile&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; TakeWhile&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,bool&gt; predicate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Int32,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IOrderedEnumerable`1" />
      </Targets>
      <Member MemberName="ThenBy&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; ThenBy&lt;TSource,TKey&gt; (this System.Linq.IOrderedEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IOrderedEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IOrderedEnumerable`1" />
      </Targets>
      <Member MemberName="ThenBy&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; ThenBy&lt;TSource,TKey&gt; (this System.Linq.IOrderedEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IOrderedEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IOrderedEnumerable`1" />
      </Targets>
      <Member MemberName="ThenByDescending&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; ThenByDescending&lt;TSource,TKey&gt; (this System.Linq.IOrderedEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IOrderedEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IOrderedEnumerable`1" />
      </Targets>
      <Member MemberName="ThenByDescending&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; ThenByDescending&lt;TSource,TKey&gt; (this System.Linq.IOrderedEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IOrderedEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="ToArray&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource[] ToArray&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource[]</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="ToDictionary&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.Dictionary&lt;TKey,TSource&gt; ToDictionary&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.Dictionary&lt;TKey,TSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="ToDictionary&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.Dictionary&lt;TKey,TSource&gt; ToDictionary&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.Dictionary&lt;TKey,TSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="ToDictionary&lt;TSource,TKey,TElement&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.Dictionary&lt;TKey,TElement&gt; ToDictionary&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TElement">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="elementSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TElement" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="ToDictionary&lt;TSource,TKey,TElement&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.Dictionary&lt;TKey,TElement&gt; ToDictionary&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TElement">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="elementSelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TElement" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="ToList&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.List&lt;TSource&gt; ToList&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.List&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="ToLookup&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ILookup&lt;TKey,TSource&gt; ToLookup&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ILookup&lt;TKey,TSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="ToLookup&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ILookup&lt;TKey,TSource&gt; ToLookup&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ILookup&lt;TKey,TSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="ToLookup&lt;TSource,TKey,TElement&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ILookup&lt;TKey,TElement&gt; ToLookup&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ILookup&lt;TKey,TElement&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TElement">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="elementSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TElement" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="ToLookup&lt;TSource,TKey,TElement&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.ILookup&lt;TKey,TElement&gt; ToLookup&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.ILookup&lt;TKey,TElement&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
          <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TElement">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="elementSelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TElement" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Union&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Union&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Union&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Union&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="first">To be added.</param>
          <param name="second">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Where&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Where&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Where&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Where&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,bool&gt; predicate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Int32,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Enumerable" Member="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Aggregate&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource Aggregate&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TSource,TSource&gt;&gt; func);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="func" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TSource,TSource&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="func">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Aggregate&lt;TSource,TAccumulate&gt;">
        <MemberSignature Language="C#" Value="public static TAccumulate Aggregate&lt;TSource,TAccumulate&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, TAccumulate seed, System.Linq.Expressions.Expression&lt;Func&lt;TAccumulate,TSource,TAccumulate&gt;&gt; func);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TAccumulate</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="seed" Type="TAccumulate" />
          <Parameter Name="func" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TAccumulate,TSource,TAccumulate&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TAccumulate">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="seed">To be added.</param>
          <param name="func">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TAccumulate" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Aggregate&lt;TSource,TAccumulate,TResult&gt;">
        <MemberSignature Language="C#" Value="public static TResult Aggregate&lt;TSource,TAccumulate,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, TAccumulate seed, System.Linq.Expressions.Expression&lt;Func&lt;TAccumulate,TSource,TAccumulate&gt;&gt; func, System.Linq.Expressions.Expression&lt;Func&lt;TAccumulate,TResult&gt;&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TResult</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="seed" Type="TAccumulate" />
          <Parameter Name="func" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TAccumulate,TSource,TAccumulate&gt;&gt;" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TAccumulate,TResult&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TAccumulate">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="seed">To be added.</param>
          <param name="func">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TAccumulate" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="All&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static bool All&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Any&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static bool Any&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Any&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static bool Any&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.IEnumerable" />
      </Targets>
      <Member MemberName="AsQueryable">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable AsQueryable (this System.Collections.IEnumerable source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.IEnumerable" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="AsQueryable&lt;TElement&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TElement&gt; AsQueryable&lt;TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TElement&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TElement&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TElement&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TElement">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TElement" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature Language="C#" Value="public static decimal Average (this System.Linq.IQueryable&lt;decimal&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Decimal</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Decimal&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature Language="C#" Value="public static double Average (this System.Linq.IQueryable&lt;double&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Double&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature Language="C#" Value="public static double Average (this System.Linq.IQueryable&lt;int&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Int32&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature Language="C#" Value="public static double Average (this System.Linq.IQueryable&lt;long&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Int64&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Average (this System.Linq.IQueryable&lt;Nullable&lt;decimal&gt;&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Decimal&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average (this System.Linq.IQueryable&lt;Nullable&lt;double&gt;&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Double&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average (this System.Linq.IQueryable&lt;Nullable&lt;int&gt;&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Int32&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average (this System.Linq.IQueryable&lt;Nullable&lt;long&gt;&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Int64&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Average (this System.Linq.IQueryable&lt;Nullable&lt;float&gt;&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Single&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Average">
        <MemberSignature Language="C#" Value="public static float Average (this System.Linq.IQueryable&lt;float&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Single</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Single&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Average&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static decimal Average&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,decimal&gt;&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Decimal</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Decimal&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Average&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static double Average&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,double&gt;&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Double&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Average&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static double Average&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,int&gt;&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Int32&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Average&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static double Average&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,long&gt;&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Int64&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Average&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Average&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;decimal&gt;&gt;&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Decimal&gt;&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Average&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;double&gt;&gt;&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Double&gt;&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Average&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;int&gt;&gt;&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Int32&gt;&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Average&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;long&gt;&gt;&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Int64&gt;&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Average&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Average&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;float&gt;&gt;&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Single&gt;&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Average&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static float Average&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,float&gt;&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Single</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Single&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable" />
      </Targets>
      <Member MemberName="Cast&lt;TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TResult&gt; Cast&lt;TResult&gt; (this System.Linq.IQueryable source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Cast``1(System.Linq.IQueryable)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Concat&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; Concat&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source1, System.Collections.Generic.IEnumerable&lt;TSource&gt; source2);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source1" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="source2" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source1">To be added.</param>
          <param name="source2">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Contains&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static bool Contains&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, TSource item);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="item" Type="TSource" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="item">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Contains&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static bool Contains&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, TSource item, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="item" Type="TSource" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="item">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Count&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static int Count&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Count&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static int Count&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="DefaultIfEmpty&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; DefaultIfEmpty&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="DefaultIfEmpty&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; DefaultIfEmpty&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, TSource defaultValue);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="defaultValue" Type="TSource" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="defaultValue">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Distinct&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; Distinct&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Distinct&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; Distinct&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="ElementAt&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource ElementAt&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, int index);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="index" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="index">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="ElementAtOrDefault&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource ElementAtOrDefault&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, int index);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="index" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="index">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Except&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; Except&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source1, System.Collections.Generic.IEnumerable&lt;TSource&gt; source2);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source1" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="source2" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source1">To be added.</param>
          <param name="source2">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Except&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; Except&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source1, System.Collections.Generic.IEnumerable&lt;TSource&gt; source2, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source1" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="source2" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source1">To be added.</param>
          <param name="source2">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="First&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource First&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="First&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource First&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="FirstOrDefault&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource FirstOrDefault&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="FirstOrDefault&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource FirstOrDefault&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="GroupBy&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt; GroupBy&lt;TSource,TKey&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TKey&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="GroupBy&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt; GroupBy&lt;TSource,TKey&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TKey&gt;&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="GroupBy&lt;TSource,TKey,TElement&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt; GroupBy&lt;TSource,TKey,TElement&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TElement&gt;&gt; elementSelector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TElement" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TKey&gt;&gt;" />
          <Parameter Name="elementSelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TElement&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TElement">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="elementSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="GroupBy&lt;TSource,TKey,TElement&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt; GroupBy&lt;TSource,TKey,TElement&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TElement&gt;&gt; elementSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TKey&gt;&gt;" />
          <Parameter Name="elementSelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TElement&gt;&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TElement">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="elementSelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TElement" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="GroupBy&lt;TSource,TKey,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TResult&gt; GroupBy&lt;TSource,TKey,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector, System.Linq.Expressions.Expression&lt;Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TSource&gt;,TResult&gt;&gt; resultSelector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TKey&gt;&gt;" />
          <Parameter Name="resultSelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TSource&gt;,TResult&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="GroupBy&lt;TSource,TKey,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TResult&gt; GroupBy&lt;TSource,TKey,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector, System.Linq.Expressions.Expression&lt;Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TSource&gt;,TResult&gt;&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TKey&gt;&gt;" />
          <Parameter Name="resultSelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TSource&gt;,TResult&gt;&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="GroupBy&lt;TSource,TKey,TElement,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TResult&gt; GroupBy&lt;TSource,TKey,TElement,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TElement&gt;&gt; elementSelector, System.Linq.Expressions.Expression&lt;Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,TResult&gt;&gt; resultSelector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TKey&gt;&gt;" />
          <Parameter Name="elementSelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TElement&gt;&gt;" />
          <Parameter Name="resultSelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,TResult&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TElement">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="elementSelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TElement" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="GroupBy&lt;TSource,TKey,TElement,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TResult&gt; GroupBy&lt;TSource,TKey,TElement,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TElement&gt;&gt; elementSelector, System.Linq.Expressions.Expression&lt;Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,TResult&gt;&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TKey&gt;&gt;" />
          <Parameter Name="elementSelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TElement&gt;&gt;" />
          <Parameter Name="resultSelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,TResult&gt;&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TElement">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="elementSelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TElement" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="GroupJoin&lt;TOuter,TInner,TKey,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TResult&gt; GroupJoin&lt;TOuter,TInner,TKey,TResult&gt; (this System.Linq.IQueryable&lt;TOuter&gt; outer, System.Collections.Generic.IEnumerable&lt;TInner&gt; inner, System.Linq.Expressions.Expression&lt;Func&lt;TOuter,TKey&gt;&gt; outerKeySelector, System.Linq.Expressions.Expression&lt;Func&lt;TInner,TKey&gt;&gt; innerKeySelector, System.Linq.Expressions.Expression&lt;Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt;&gt; resultSelector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="outer" Type="System.Linq.IQueryable&lt;TOuter&gt;" RefType="this" />
          <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable&lt;TInner&gt;" />
          <Parameter Name="outerKeySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TOuter,TKey&gt;&gt;" />
          <Parameter Name="innerKeySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TInner,TKey&gt;&gt;" />
          <Parameter Name="resultSelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TOuter">To be added.</typeparam>
          <typeparam name="TInner">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="outer">To be added.</param>
          <param name="inner">To be added.</param>
          <param name="outerKeySelector">To be added.</param>
          <param name="innerKeySelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TOuter" />
          <TypeParameter Name="TInner" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="GroupJoin&lt;TOuter,TInner,TKey,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TResult&gt; GroupJoin&lt;TOuter,TInner,TKey,TResult&gt; (this System.Linq.IQueryable&lt;TOuter&gt; outer, System.Collections.Generic.IEnumerable&lt;TInner&gt; inner, System.Linq.Expressions.Expression&lt;Func&lt;TOuter,TKey&gt;&gt; outerKeySelector, System.Linq.Expressions.Expression&lt;Func&lt;TInner,TKey&gt;&gt; innerKeySelector, System.Linq.Expressions.Expression&lt;Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt;&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="outer" Type="System.Linq.IQueryable&lt;TOuter&gt;" RefType="this" />
          <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable&lt;TInner&gt;" />
          <Parameter Name="outerKeySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TOuter,TKey&gt;&gt;" />
          <Parameter Name="innerKeySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TInner,TKey&gt;&gt;" />
          <Parameter Name="resultSelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt;&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TOuter">To be added.</typeparam>
          <typeparam name="TInner">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="outer">To be added.</param>
          <param name="inner">To be added.</param>
          <param name="outerKeySelector">To be added.</param>
          <param name="innerKeySelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TOuter" />
          <TypeParameter Name="TInner" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Intersect&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; Intersect&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source1, System.Collections.Generic.IEnumerable&lt;TSource&gt; source2);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source1" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="source2" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source1">To be added.</param>
          <param name="source2">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Intersect&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; Intersect&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source1, System.Collections.Generic.IEnumerable&lt;TSource&gt; source2, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source1" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="source2" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source1">To be added.</param>
          <param name="source2">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Join&lt;TOuter,TInner,TKey,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TResult&gt; Join&lt;TOuter,TInner,TKey,TResult&gt; (this System.Linq.IQueryable&lt;TOuter&gt; outer, System.Collections.Generic.IEnumerable&lt;TInner&gt; inner, System.Linq.Expressions.Expression&lt;Func&lt;TOuter,TKey&gt;&gt; outerKeySelector, System.Linq.Expressions.Expression&lt;Func&lt;TInner,TKey&gt;&gt; innerKeySelector, System.Linq.Expressions.Expression&lt;Func&lt;TOuter,TInner,TResult&gt;&gt; resultSelector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="outer" Type="System.Linq.IQueryable&lt;TOuter&gt;" RefType="this" />
          <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable&lt;TInner&gt;" />
          <Parameter Name="outerKeySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TOuter,TKey&gt;&gt;" />
          <Parameter Name="innerKeySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TInner,TKey&gt;&gt;" />
          <Parameter Name="resultSelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TOuter,TInner,TResult&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TOuter">To be added.</typeparam>
          <typeparam name="TInner">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="outer">To be added.</param>
          <param name="inner">To be added.</param>
          <param name="outerKeySelector">To be added.</param>
          <param name="innerKeySelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TOuter" />
          <TypeParameter Name="TInner" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Join&lt;TOuter,TInner,TKey,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TResult&gt; Join&lt;TOuter,TInner,TKey,TResult&gt; (this System.Linq.IQueryable&lt;TOuter&gt; outer, System.Collections.Generic.IEnumerable&lt;TInner&gt; inner, System.Linq.Expressions.Expression&lt;Func&lt;TOuter,TKey&gt;&gt; outerKeySelector, System.Linq.Expressions.Expression&lt;Func&lt;TInner,TKey&gt;&gt; innerKeySelector, System.Linq.Expressions.Expression&lt;Func&lt;TOuter,TInner,TResult&gt;&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="outer" Type="System.Linq.IQueryable&lt;TOuter&gt;" RefType="this" />
          <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable&lt;TInner&gt;" />
          <Parameter Name="outerKeySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TOuter,TKey&gt;&gt;" />
          <Parameter Name="innerKeySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TInner,TKey&gt;&gt;" />
          <Parameter Name="resultSelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TOuter,TInner,TResult&gt;&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TOuter">To be added.</typeparam>
          <typeparam name="TInner">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="outer">To be added.</param>
          <param name="inner">To be added.</param>
          <param name="outerKeySelector">To be added.</param>
          <param name="innerKeySelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TOuter" />
          <TypeParameter Name="TInner" />
          <TypeParameter Name="TKey" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Last&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource Last&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Last&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource Last&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="LastOrDefault&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource LastOrDefault&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="LastOrDefault&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource LastOrDefault&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="LongCount&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static long LongCount&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int64</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="LongCount&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static long LongCount&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int64</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Max&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource Max&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Max&lt;TSource,TResult&gt;">
        <MemberSignature Language="C#" Value="public static TResult Max&lt;TSource,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TResult&gt;&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TResult</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TResult&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Min&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource Min&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Min&lt;TSource,TResult&gt;">
        <MemberSignature Language="C#" Value="public static TResult Min&lt;TSource,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TResult&gt;&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TResult</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TResult&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable" />
      </Targets>
      <Member MemberName="OfType&lt;TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TResult&gt; OfType&lt;TResult&gt; (this System.Linq.IQueryable source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.OfType``1(System.Linq.IQueryable)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="OrderBy&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IOrderedQueryable&lt;TSource&gt; OrderBy&lt;TSource,TKey&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IOrderedQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TKey&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="OrderBy&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IOrderedQueryable&lt;TSource&gt; OrderBy&lt;TSource,TKey&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IOrderedQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TKey&gt;&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="OrderByDescending&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IOrderedQueryable&lt;TSource&gt; OrderByDescending&lt;TSource,TKey&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IOrderedQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TKey&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="OrderByDescending&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IOrderedQueryable&lt;TSource&gt; OrderByDescending&lt;TSource,TKey&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IOrderedQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TKey&gt;&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Reverse&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; Reverse&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Select&lt;TSource,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TResult&gt; Select&lt;TSource,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TResult&gt;&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TResult&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Select&lt;TSource,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TResult&gt; Select&lt;TSource,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,int,TResult&gt;&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Int32,TResult&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SelectMany&lt;TSource,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TResult&gt; SelectMany&lt;TSource,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt;&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SelectMany&lt;TSource,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TResult&gt; SelectMany&lt;TSource,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,int,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt;&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Int32,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SelectMany&lt;TSource,TCollection,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TResult&gt; SelectMany&lt;TSource,TCollection,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt;&gt; collectionSelector, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TCollection,TResult&gt;&gt; resultSelector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="collectionSelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt;&gt;" />
          <Parameter Name="resultSelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TCollection,TResult&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TCollection">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="collectionSelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TCollection" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SelectMany&lt;TSource,TCollection,TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TResult&gt; SelectMany&lt;TSource,TCollection,TResult&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,int,System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt;&gt; collectionSelector, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TCollection,TResult&gt;&gt; resultSelector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="collectionSelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Int32,System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt;&gt;" />
          <Parameter Name="resultSelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TCollection,TResult&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TCollection">To be added.</typeparam>
          <typeparam name="TResult">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="collectionSelector">To be added.</param>
          <param name="resultSelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TCollection" />
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SequenceEqual&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static bool SequenceEqual&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source1, System.Collections.Generic.IEnumerable&lt;TSource&gt; source2);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source1" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="source2" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source1">To be added.</param>
          <param name="source2">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SequenceEqual&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static bool SequenceEqual&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source1, System.Collections.Generic.IEnumerable&lt;TSource&gt; source2, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source1" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="source2" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source1">To be added.</param>
          <param name="source2">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Single&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource Single&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Single&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource Single&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SingleOrDefault&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource SingleOrDefault&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SingleOrDefault&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static TSource SingleOrDefault&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TSource</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Skip&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; Skip&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, int count);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="count" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="count">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SkipWhile&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; SkipWhile&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="SkipWhile&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; SkipWhile&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,int,bool&gt;&gt; predicate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Int32,System.Boolean&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature Language="C#" Value="public static decimal Sum (this System.Linq.IQueryable&lt;decimal&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Decimal</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Decimal&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature Language="C#" Value="public static double Sum (this System.Linq.IQueryable&lt;double&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Double&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature Language="C#" Value="public static int Sum (this System.Linq.IQueryable&lt;int&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Int32&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature Language="C#" Value="public static long Sum (this System.Linq.IQueryable&lt;long&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int64</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Int64&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Sum (this System.Linq.IQueryable&lt;Nullable&lt;decimal&gt;&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Decimal&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Sum (this System.Linq.IQueryable&lt;Nullable&lt;double&gt;&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Double&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; Sum (this System.Linq.IQueryable&lt;Nullable&lt;int&gt;&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Int32&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature Language="C#" Value="public static Nullable&lt;long&gt; Sum (this System.Linq.IQueryable&lt;Nullable&lt;long&gt;&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Int64&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Sum (this System.Linq.IQueryable&lt;Nullable&lt;float&gt;&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Nullable&lt;System.Single&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Sum">
        <MemberSignature Language="C#" Value="public static float Sum (this System.Linq.IQueryable&lt;float&gt; source);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Single</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;System.Single&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Sum&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static decimal Sum&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,decimal&gt;&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Decimal</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Decimal&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Sum&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static double Sum&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,double&gt;&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Double</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Double&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Sum&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static int Sum&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,int&gt;&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int32</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Int32&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Sum&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static long Sum&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,long&gt;&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Int64</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Int64&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Sum&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Sum&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;decimal&gt;&gt;&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Decimal&gt;&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Sum&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Sum&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;double&gt;&gt;&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Double&gt;&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Sum&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; Sum&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;int&gt;&gt;&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Int32&gt;&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Sum&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;long&gt; Sum&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;long&gt;&gt;&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Int64&gt;&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Sum&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Sum&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,Nullable&lt;float&gt;&gt;&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Nullable&lt;System.Single&gt;&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Sum&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static float Sum&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,float&gt;&gt; selector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Single</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Single&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Take&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; Take&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, int count);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="count" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="count">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="TakeWhile&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; TakeWhile&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="TakeWhile&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; TakeWhile&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,int,bool&gt;&gt; predicate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Int32,System.Boolean&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IOrderedQueryable`1" />
      </Targets>
      <Member MemberName="ThenBy&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IOrderedQueryable&lt;TSource&gt; ThenBy&lt;TSource,TKey&gt; (this System.Linq.IOrderedQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IOrderedQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IOrderedQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TKey&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IOrderedQueryable`1" />
      </Targets>
      <Member MemberName="ThenBy&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IOrderedQueryable&lt;TSource&gt; ThenBy&lt;TSource,TKey&gt; (this System.Linq.IOrderedQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IOrderedQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IOrderedQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TKey&gt;&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IOrderedQueryable`1" />
      </Targets>
      <Member MemberName="ThenByDescending&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IOrderedQueryable&lt;TSource&gt; ThenByDescending&lt;TSource,TKey&gt; (this System.Linq.IOrderedQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IOrderedQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IOrderedQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TKey&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IOrderedQueryable`1" />
      </Targets>
      <Member MemberName="ThenByDescending&lt;TSource,TKey&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IOrderedQueryable&lt;TSource&gt; ThenByDescending&lt;TSource,TKey&gt; (this System.Linq.IOrderedQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,TKey&gt;&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IOrderedQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IOrderedQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="keySelector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,TKey&gt;&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <typeparam name="TKey">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="keySelector">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
          <TypeParameter Name="TKey" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Union&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; Union&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source1, System.Collections.Generic.IEnumerable&lt;TSource&gt; source2);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source1" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="source2" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source1">To be added.</param>
          <param name="source2">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Union&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; Union&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source1, System.Collections.Generic.IEnumerable&lt;TSource&gt; source2, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source1" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="source2" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source1">To be added.</param>
          <param name="source2">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Where&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; Where&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,bool&gt;&gt; predicate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Boolean&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Linq.IQueryable`1" />
      </Targets>
      <Member MemberName="Where&lt;TSource&gt;">
        <MemberSignature Language="C#" Value="public static System.Linq.IQueryable&lt;TSource&gt; Where&lt;TSource&gt; (this System.Linq.IQueryable&lt;TSource&gt; source, System.Linq.Expressions.Expression&lt;Func&lt;TSource,int,bool&gt;&gt; predicate);" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Linq.IQueryable&lt;TSource&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="System.Linq.IQueryable&lt;TSource&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TSource,System.Int32,System.Boolean&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TSource">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <TypeParameters>
          <TypeParameter Name="TSource" />
        </TypeParameters>
        <Link Type="System.Linq.Queryable" Member="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})" />
      </Member>
    </ExtensionMethod>
  </ExtensionMethods>
</Overview>
