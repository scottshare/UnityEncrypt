<MyDocs>
<MyMembers name="Class">
<remarks>
	<para>To create a <B>MySQLDataReader</B>, you must call the <see cref="MySqlCommand.ExecuteReader"/>
	method of the <see cref="MySqlCommand"/> object, rather than directly using a constructor.
	</para>
	<para>While the <B>MySqlDataReader</B> is in use, the associated <see cref="MySqlConnection"/>
	 is busy serving the <B>MySqlDataReader</B>, and no other operations can be performed 
	 on the <B>MySqlConnection</B> other than closing it. This is the case until the 
	 <see cref="MySqlDataReader.Close"/> method of the <B>MySqlDataReader</B> is called. 
	 </para>
	<para>Changes made to a resultset by another process or thread while data is being 
	read may be visible to the user of the <B>MySqlDataReader</B>. However, the 
	precise behavior is timing dependent.
	</para>
	<para><see cref="MySqlDataReader.IsClosed"/> and <see cref="MySqlDataReader.RecordsAffected"/> 
	are the only properties that you can call after the <B>MySqlDataReader</B> is 
	closed. Though the <B>RecordsAffected</B> property may be accessed at any time 
	while the <B>MySqlDataReader</B> exists, always call <B>Close</B> before returning 
	the value of <B>RecordsAffected</B> to ensure an accurate return value.
	</para>
	<para>For optimal performance, <B>MySqlDataReader</B> avoids creating 
	unnecessary objects or making unnecessary copies of data. As a result, multiple calls 
	to methods such as <see cref="MySqlDataReader.GetValue"/> return a reference to the 
	same object. Use caution if you are modifying the underlying value of the objects 
	returned by methods such as <B>GetValue</B>.
	</para>
</remarks>

<example>
	The following example creates a <see cref="MySqlConnection"/>, 
	a <see cref="MySqlCommand"/>, and a <B>MySqlDataReader</B>. The example reads through 
	the data, writing it out to the console. Finally, the example closes the <B>MySqlDataReader</B>, then the 
	<B>MySqlConnection</B>.
	<code lang="Visual Basic">
Public Sub ReadMyData(myConnString As String)
    Dim mySelectQuery As String = "SELECT OrderID, CustomerID FROM Orders"
    Dim myConnection As New MySqlConnection(myConnString)
    Dim myCommand As New MySqlCommand(mySelectQuery, myConnection)
    myConnection.Open()
    Dim myReader As MySqlDataReader
    myReader = myCommand.ExecuteReader()
    ' Always call Read before accessing data.
    While myReader.Read()
        Console.WriteLine((myReader.GetInt32(0) &amp; ", " &amp; myReader.GetString(1)))
    End While
    ' always call Close when done reading.
    myReader.Close()
    ' Close the connection when done with it.
    myConnection.Close()
End Sub 'ReadMyData
	</code>
	<code lang="C#">
public void ReadMyData(string myConnString) {
    string mySelectQuery = "SELECT OrderID, CustomerID FROM Orders";
    MySqlConnection myConnection = new MySqlConnection(myConnString);
    MySqlCommand myCommand = new MySqlCommand(mySelectQuery,myConnection);
    myConnection.Open();
    MySqlDataReader myReader;
    myReader = myCommand.ExecuteReader();
    // Always call Read before accessing data.
    while (myReader.Read()) {
       Console.WriteLine(myReader.GetInt32(0) + ", " + myReader.GetString(1));
    }
    // always call Close when done reading.
    myReader.Close();
    // Close the connection when done with it.
    myConnection.Close();
 }
	</code>
</example>


</MyMembers>



</MyDocs>