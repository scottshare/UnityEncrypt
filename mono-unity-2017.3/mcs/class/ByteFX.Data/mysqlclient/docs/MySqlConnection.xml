<MyDocs>
<MyMembers name="Class">
<remarks>
	<para>
		A <b>MySqlConnection</b> object represents a session to a MySQL Server 
		data source.  When you create an instance of <B>MySqlConnection</B>, all 
		properties are set to their initial values. For a list of these values, see the 
		<B>MySqlConnection</B> constructor.
	</para>

	<para>
		If the <B>MySqlConnection</B> goes out of scope, it is not closed. Therefore, 
		you must explicitly close the connection by calling <see cref="MySqlConnection.Close"/> 
		or <see cref="MySqlConnection.Dispose"/>.
	</para>

</remarks>

<example>
	The following example creates a <see cref="MySqlCommand"/> and 
	a <B>MySqlConnection</B>. The <B>MySqlConnection</B> is opened and set as the  
	<see cref="MySqlCommand.Connection"/> for the <B>MySqlCommand</B>. The example then calls  
	<see cref="MySqlCommand.ExecuteNonQuery"/>, and closes the connection. To accomplish this, the <B>ExecuteNonQuery</B> is 
	passed a connection string and a query string that is a SQL INSERT 
	statement.
	<code lang="Visual Basic">
	<c>
Public Sub InsertRow(myConnectionString As String)
	' If the connection string is null, use a default.
	If myConnectionString = "" Then
		myConnectionString = "Database=Test;Data Source=localhost;User Id=username;Password=pass"
	End If
	Dim myConnection As New MySqlConnection(myConnectionString)
	Dim myInsertQuery As String = "INSERT INTO Orders (id, customerId, amount) Values(1001, 23, 30.66)"
	Dim myCommand As New MySqlCommand(myInsertQuery)
	myCommand.Connection = myConnection
	myConnection.Open()
	myCommand.ExecuteNonQuery()
	myCommand.Connection.Close()
End Sub
</c> 
	</code>
	<code lang="C#">
<c>
public void InsertRow(string myConnectionString) 
{
	// If the connection string is null, use a default.
	if(myConnectionString == "") 
	{
		myConnectionString = "Database=Test;Data Source=localhost;User Id=username;Password=pass";
	}
	MySqlConnection myConnection = new MySqlConnection(myConnectionString);
	string myInsertQuery = "INSERT INTO Orders (id, customerId, amount) Values(1001, 23, 30.66)";
	MySqlCommand myCommand = new MySqlCommand(myInsertQuery);
	myCommand.Connection = myConnection;
	myConnection.Open();
	myCommand.ExecuteNonQuery();
	myCommand.Connection.Close();
}
</c>
	</code>
</example>


</MyMembers>

<MyMembers name="ConnectionTimeout">
	<exception cref="System.ArgumentException">The value set is less than 0.</exception>
	<remarks>
		A value of 0 indicates no limit, and should be avoided in a 
		<see cref="MySqlConnection.ConnectionString"/> because an attempt to connect 
		will wait indefinitely.
	</remarks>
	<example>
		The following example creates a MySqlConnection
		and sets some of its properties in the connection string.
		<code lang="Visual Basic">
Public Sub CreateSqlConnection()
	Dim myConnection As New MySqlConnection()
	myConnection.ConnectionString = "Persist Security Info=False;Username=user;Password=pass;database=test1;server=localhost;Connect Timeout=30"
	myConnection.Open()
End Sub
</code>
<code lang="C#">
public void CreateSqlConnection() 
{
	MySqlConnection myConnection = new MySqlConnection();
	myConnection.ConnectionString = "Persist Security Info=False;Username=user;Password=pass;database=test1;server=localhost;Connect Timeout=30";
	myConnection.Open();
}
</code>				
	</example>
</MyMembers>


<MyMembers name="ConnectionString">
	<remarks>
	<para>The <B>ConnectionString</B> returned may not be exactly like what was originally
	set but will be indentical in terms of keyword/value pairs.  Security information
	will not be included unless the Persist Security Info value is set to true. 
	</para>
	<para>You can use the <B>ConnectionString</B> property to connect to a database. 
	The following example illustrates a typical connection string.</para>
	<c>"Persist Security Info=False;database=MyDB;server=MySqlServer;user id=myUser;Password=myPass"</c>
	<para>The <B>ConnectionString</B> property can be set only when the connection is 
	closed. Many of the connection string values have corresponding read-only 
	properties. When the connection string is set, all of these properties are 
	updated, except when an error is detected. In this case, none of the properties 
	are updated. <see cref="MySqlConnection"/> properties return only those settings contained in the 
	<B>ConnectionString</B>.</para>
	<para>To connect to a local machine, specify "localhost" for the server. If you do not 
	specify a server, localhost is assumed.</para>
	<para>Resetting the <B>ConnectionString</B> on a closed connection resets all 
	connection string values (and related properties) including the password. For 
	example, if you set a connection string that includes "Database= MyDb", and 
	then reset the connection string to "Data Source=myserver;User Id=myUser;Password=myPass", 
	the <see cref="MySqlConnection.Database"/> property is no longer set to MyDb.</para>
	<para>The connection string is parsed immediately after being set. If errors in 
	syntax are found when parsing, a runtime exception, such as <see cref="ArgumentException"/>, 
	is generated. Other errors can be found only when an attempt is made to open the 
	connection.</para>
	<para>The basic format of a connection string consists of a series of keyword/value 
	pairs separated by semicolons. The equal sign (=) connects each keyword and its 
	value. To include values that contain a semicolon, single-quote character, or 
	double-quote character, the value must be enclosed in double quotes. If the 
	value contains both a semicolon and a double-quote character, the value can be 
	enclosed in single quotes. The single quote is also useful if the value begins 
	with a double-quote character. Conversely, the double quote can be used if the 
	value begins with a single quote. If the value contains both single-quote and 
	double-quote characters, the quote character used to enclose the value must be 
	doubled each time it occurs within the value.</para>
	<para>To include preceding or trailing spaces in the string value, the value must 
	be enclosed in either single quotes or double quotes. Any leading or trailing 
	spaces around integer, Boolean, or enumerated values are ignored, even if 
	enclosed in quotes. However, spaces within a string literal keyword or value are 
	preserved. Using .NET Framework version 1.1, single or double quotes may be used 
	within a connection string without using delimiters (for example, Data Source= 
	my'Server or Data Source= my"Server), unless a quote character is the first or 
	last character in the value.</para>
	<para>To include an equal sign (=) in a keyword or value, it must be preceded by 
	another equal sign. For example, in the hypothetical connection string</para>
	<c>"key==word=value"</c>
	<para></para>
	<para>the keyword is "key=word" and the value is "value".</para>
	<para>If a specific keyword in a keyword= value pair occurs multiple times in a 
	connection string, the last occurrence listed is used in the value set.</para>
	<para>Keywords are not case sensitive.</para>
	<para>The following table lists the valid names for keyword values within the 
	<B>ConnectionString</B>.</para>
	<div class="tablediv"><table class="dtTABLE" cellspacing="0"><tr valign="top">
		<th width="33%">Name</th>
		<th width="33%">Default</th>
		<th width="33%">Description</th>
		</tr>
		<tr>
			<td>Connect Timeout<para>  -or-  </para>Connection Timeout</td>
			<td>15</td>
			<td>The length of time (in seconds) to wait for a connection to the server before 
terminating the attempt and generating an error.</td>
		</tr>
		<tr>
			<td>
				Host<para>  -or-  </para>Server<para>  -or-  </para>Data Source<para>  -or-  </para>
				DataSource<para>  -or-  </para>Address<para>  -or-  </para>Addr<para>  -or-  </para>
				Network Address
			</td>
			<td>localhost</td>
			<td><para>The name or network address of the instance of MySQL to which to connect.  Multiple hosts can be
			specified separated by &amp;.  This can be useful where multiple MySQL servers are configured for replication
			and you are not concerned about the precise server you are connecting to.  No attempt is made by the provider to
			synchronize writes to the database so care should be taken when using this option.
			</para>
			<para>
				In Unix environment with Mono, this can be a fully qualified path to MySQL socket filename. With this configuration, the Unix socket will be used instead of TCP/IP socket.
				Currently only a single socket name can be given so accessing MySQL in a replicated environment using Unix sockets is not currently supported.
			</para>
			</td>
		</tr>
		<tr>
			<td>Port</td>
			<td>3306</td>
			<td>The port MySQL is using to listen for connections.  Specify -1 for this value to use a 
				named pipe connection (Windows only). This value is ignored if Unix socket is used.</td>
		</tr>
		<tr>
			<td>Encrypt</td>
			<td>false</td>
			<td>When <B>true</B>, SSL encryption is used for all data sent between the 
client and server if the server has a certificate installed. Recognized values 
are <B>true</B>, <B>false</B>, <B>yes</B>, and <B>no</B>.<para><b>Note</b>  This parameter currently has no
effect.</para></td>
		</tr>
		<tr>
			<td>Initial Catalog<para>  -or-  </para>Database</td>
			<td></td>
			<td>The name of the database to use intially</td>
		</tr>
		<tr>
			<td>Password<para>  -or-  </para>pwd</td>
			<td></td>
			<td>The password for the MySQL account being used.</td>
		</tr>
		<tr>
			<td>Persist Security Info</td>
			<td>false</td>
			<td>When set to <B>false</B> or <B>no</B> (strongly recommended), security-sensitive 
information, such as the password, is not returned as part of the connection if 
the connection is open or has ever been in an open state. Resetting the 
connection string resets all connection string values including the password. 
Recognized values are <B>true</B>, <B>false</B>, <B>yes</B>, and <B>no</B>.</td>
		</tr>
		<tr>
			<td>User Id<para>  -or-  </para>Username<para>  -or-  </para>Uid<para>  -or-  </para>User name</td>
			<td></td>
			<td>The MySQL login account being used.</td>
		</tr>
		</table>
		</div>
	<para>
	The following table lists the valid names for connection pooling values within 
the <B>ConnectionString</B>. For more information about connection pooling, see 
Connection Pooling for the ByteFX Data Provider for MySQL.</para>
	<div class="tablediv"><table class="dtTABLE" cellspacing="0"><tr valign="top">
		<th width="33%">Name</th>
		<th width="33%">Default</th>
		<th width="33%">Description</th>
		</tr>
		<tr>
			<td>Connection Lifetime</td>
			<td>0</td>
			<td>When a connection is returned to the pool, its creation time is compared with 
the current time, and the connection is destroyed if that time span (in seconds) 
exceeds the value specified by <B>Connection Lifetime</B>. This is useful in 
clustered configurations to force load balancing between a running server and a 
server just brought online. 
<para>A value of zero (0) causes pooled connections to have the maximum connection 
timeout.</para></td>
		</tr>
		<tr>
			<td>Max Pool Size</td>
			<td>100</td>
			<td>The maximum number of connections allowed in the pool.</td>
		</tr>
		<tr>
			<td>Min Pool Size</td>
			<td>0</td>
			<td>The minimum number of connections allowed in the pool.</td>
		</tr>
		<tr>
			<td>Pooling</td>
			<td>true</td>
			<td>When <B>true</B>, the <B>MySqlConnection</B> object is drawn from the appropriate 
pool, or if necessary, is created and added to the appropriate pool. Recognized 
values are <B>true</B>, <B>false</B>, <B>yes</B>, and <B>no</B>.</td>
		</tr>
		<tr>
			<td>Use Pipe<para>  -or-  </para>Pipe</td>
			<td></td>
			<td>When set to the name of a named pipe, the <B>MySqlConnection</B> will attempt to connect to MySQL
			on that named pipe.<br/><br/>This settings only applies to the Windows platform.</td>
		</tr>
	</table></div>
<para>When setting keyword or connection pooling values that require a Boolean 
value, you can use 'yes' instead of 'true', and 'no' instead of 'false'.</para>
<para><B>Note</B>  The ByteFX Data Provider for MySQL uses the native socket protocol to 
communicate with MySQL.  Therefore, it does not support the use of an ODBC data source name (DSN) when 
connecting to MySQL because it does not add an ODBC layer.</para>
<para><B>CAUTION</B>  In this release, the application should use caution when constructing a 
connection string based on user input (for example when retrieving user ID and password information from a 
dialog box, and appending it to the connection string). The application should 
ensure that a user cannot embed extra connection string parameters in these 
values (for example, entering a password as "validpassword;database=somedb" in 
an attempt to attach to a different database).</para>
	</remarks>
	<example>
	The following example creates a <see cref="MySqlConnection"/> and sets some of its properties
	<code lang="Visual Basic">
	Public Sub CreateConnection()
		Dim myConnection As New MySqlConnection()
		myConnection.ConnectionString = "Persist Security Info=False;database=myDB;server=myHost;Connect Timeout=30;user id=myUser; pwd=myPass"
		myConnection.Open()
	End Sub 'CreateConnection
	</code>
	<code lang="C#">
	public void CreateConnection() 
	{
		MySqlConnection myConnection = new MySqlConnection();
		myConnection.ConnectionString = "Persist Security Info=False;database=myDB;server=myHost;Connect Timeout=30;user id=myUser; pwd=myPass";
		myConnection.Open();
	}
	</code>
</example>
	<example>
		The following example creates a <see cref="MySqlConnection"/> in Unix environment with Mono installed. MySQL socket filename used in this example is "/var/lib/mysql/mysql.sock". The actual filename depends on your MySQL configuration.
	<code lang="Visual Basic">
	Public Sub CreateConnection()
		Dim myConnection As New MySqlConnection()
		myConnection.ConnectionString = "database=myDB;server=/var/lib/mysql/mysql.sock;user id=myUser; pwd=myPass"
		myConnection.Open()
	End Sub 'CreateConnection
	</code>
	<code lang="C#">
	public void CreateConnection() 
	{
		MySqlConnection myConnection = new MySqlConnection();
		myConnection.ConnectionString = "database=myDB;server=/var/lib/mysql/mysql.sock;user id=myUser; pwd=myPass";
		myConnection.Open();
	}
	</code>
	</example>
</MyMembers>
</MyDocs>
