<MyDocs>
<MyMembers name="Class">
<remarks>
<p>The <A href="frlrfsystemdatasqlclientsqldataadapterclasstopic.htm">MySqlDataAdapter</A> 
does not automatically generate the SQL statements required to 
reconcile changes made to a <A href="frlrfsystemdatadatasetclasstopic.htm">DataSet</A> with the associated 
instance of MySQL. However, you can create a <B>MySqlCommandBuilder</B> 
object to automatically generate SQL statements for single-table 
updates if you set the <A href="frlrfsystemdatasqlclientsqldataadapterclassselectcommandtopic.htm">SelectCommand</A> 
property of the <B>MySqlDataAdapter</B>. Then, any additional SQL 
statements that you do not set are generated by the 
<B>MySqlCommandBuilder</B>.</p>
<P>The <B>MySqlCommandBuilder</B> registers itself as a listener for <A 
href="frlrfsystemdatasqlclientsqldataadapterclassrowupdatingtopic.htm">RowUpdating</A> 
events whenever you set the <A 
href="frlrfsystemdatasqlclientsqlcommandbuilderclassdataadaptertopic.htm">DataAdapter</A> 
property. You can only associate one <B>MySqlDataAdapter</B> or 
<B>MySqlCommandBuilder</B> object with each other at one time.</P>
<P>To generate INSERT, UPDATE, or DELETE statements, the 
<B>MySqlCommandBuilder</B> uses the <B>SelectCommand</B> property to retrieve a 
required set of metadata automatically. If you change the <B>SelectCommand</B> 
after the metadata has is retrieved (for example, after the first update), you 
should call the <A 
href="frlrfsystemdatasqlclientsqlcommandbuilderclassrefreshschematopic.htm">RefreshSchema</A> 
method to update the metadata.</P>
<P>The <B>SelectCommand</B> must also return at least one primary key or unique 
column. If none are present, an <I>InvalidOperation</I> exception is generated, 
and the commands are not generated.</P>
<P>The <B>MySqlCommandBuilder</B> also uses the <A 
href="frlrfsystemdatasqlclientsqlcommandclassconnectiontopic.htm">Connection</A>, 
<A 
href="frlrfsystemdatasqlclientsqlcommandclasscommandtimeouttopic.htm">CommandTimeout</A>, 
and <A 
href="frlrfsystemdatasqlclientsqlcommandclasstransactiontopic.htm">Transaction</A> 
properties referenced by the <B>SelectCommand</B>. The user should call 
<B>RefreshSchema</B> if any of these properties are modified, or if the 
<B>SelectCommand</B> itself is replaced. Otherwise the <A 
href="frlrfsystemdatasqlclientsqldataadapterclassinsertcommandtopic.htm">InsertCommand</A>, 
<A 
href="frlrfsystemdatasqlclientsqldataadapterclassupdatecommandtopic.htm">UpdateCommand</A>, 
and <A 
href="frlrfsystemdatasqlclientsqldataadapterclassdeletecommandtopic.htm">DeleteCommand</A> 
properties retain their previous values.</P>
<P>If you call <A 
href="frlrfsystemcomponentmodelcomponentclassdisposetopic.htm">Dispose</A>, the 
<B>MySqlCommandBuilder</B> is disassociated from the <B>MySqlDataAdapter</B>, and 
the generated commands are no longer used.</P>
</remarks>

<example>
	The	following example uses the <A 
	href="frlrfsystemdatasqlclientsqlcommandclasstopic.htm">MySqlCommand</A>, along <A 
	href="frlrfsystemdatasqlclientsqldataadapterclasstopic.htm">MySqlDataAdapter</A> 
	and <A 
	href="frlrfsystemdatasqlclientsqlconnectionclasstopic.htm">MySqlConnection</A>, to 
	select rows from a data source. The example is passed an initialized <A 
	href="frlrfsystemdatadatasetclasstopic.htm">DataSet</A>, a connection string, a 
	query string that is a SQL SELECT statement, and a string that is the 
	name of the database table. The example then creates a <B>MySqlCommandBuilder</B>.
	
	<code lang="Visual Basic">
Public Shared Function SelectRows(myConnection As String, mySelectQuery As String, myTableName As String) As DataSet
    Dim myConn As New MySqlConnection(myConnection)
    Dim myDataAdapter As New MySqlDataAdapter()
    myDataAdapter.SelectCommand = New MySqlCommand(mySelectQuery, myConn)
    Dim cb As SqlCommandBuilder = New MySqlCommandBuilder(myDataAdapter)

    myConn.Open()

    Dim ds As DataSet = New DataSet
    myDataAdapter.Fill(ds, myTableName)

    ' Code to modify data in DataSet here 

    ' Without the MySqlCommandBuilder this line would fail.
    myDataAdapter.Update(ds, myTableName)

    myConn.Close()
End Function 'SelectRows
	</code>
	<code lang="C#">
public static DataSet SelectRows(string myConnection, string mySelectQuery, string myTableName)
{
   MySqlConnection myConn = new MySqlConnection(myConnection);
   MySqlDataAdapter myDataAdapter = new MySqlDataAdapter();
   myDataAdapter.SelectCommand = new MySqlCommand(mySelectQuery, myConn);
   MySqlCommandBuilder cb = new MySqlCommandBuilder(myDataAdapter);

   myConn.Open();

   DataSet ds = new DataSet();
   myDataAdapter.Fill(ds, myTableName);

   //code to modify data in DataSet here

   //Without the MySqlCommandBuilder this line would fail
   myDataAdapter.Update(ds, myTableName);

   myConn.Close();

   return ds;
}

	</code>
</example>


</MyMembers>

<MyMembers name="ConnectionTimeout">
	<exception cref="System.ArgumentException">The value set is less than 0.</exception>
	<remarks>
		A value of 0 indicates no limit, and should be avoided in a 
		<a href="ByteFX.Data.MySqlClient.MySqlConnection.ConnectionString.html">ConnectionString</a>
		because an attempt to connect will wait indefinitely.
	</remarks>
	<example>
		The following example creates a MySqlConnection
		and sets some of its properties in the connection string.
		<code lang="Visual Basic"><c>
Public Sub CreateSqlConnection()
	Dim myConnection As New MySqlConnection()
	myConnection.ConnectionString = "Persist Security Info=False;Username=user;Password=pass;database=test1;server=localhost;Connect Timeout=30"
	myConnection.Open()
End Sub
</c></code>
<code lang="C#"><c>
public void CreateSqlConnection() 
{
	MySqlConnection myConnection = new MySqlConnection();
	myConnection.ConnectionString = "Persist Security Info=False;Username=user;Password=pass;database=test1;server=localhost;Connect Timeout=30";
	myConnection.Open();
}
</c></code>				
	</example>
</MyMembers>

</MyDocs>