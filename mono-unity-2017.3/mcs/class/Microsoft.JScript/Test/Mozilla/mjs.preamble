//
// The contents of this file are prepended to every test before it is run.
// It contains mostly library functions needed to run the tests.
//
// MJS currently does not support assignment to undeclared variables which
// is why this file declares all variables that are assigned to in tests.
//
// MJS also currently has trouble with boolean conditions (related to
// boxing) in some situations which is why the date adjusment logic from
// this preamble does not work. This causes a lot of the date tests to
// fail even though the tested date functionality works.
//
// The support functions are mostly from the Mozilla test infrastructure,
// but some had to be changed or reimplemented to work correctly.
//

function startTest() { }
function stopTest() { }
function writeHeaderToLog(header) { }
function writeLineToLog(line) { }
function enterFunc(f) { }
function exitFunc(f) { }
function printBugNumber(i) { }
function printStatus(s) { }

var test_count = 0;
var fail_count = 0;
var TESTBOOL;
var testcases = [];
var tc = 0;
var GLOBAL = "[object global]";

// These are needed to get rid of warnings.
var NEW_PROPERTY; var DESCRIPTION; var DateCase; var test_times;
var a; var b; var d; var e; var h; var i; var j; var k; var l;
var m; var n; var o; var p; var s; var u; var v; var x; var y; var z;
var THIS; var value; var SOMEVAR; var VAR; var VAR1; var VAR2;
var MYVAR1; var EXPECTED; var shiftpow; var power; var shiftexp;
var getClass; var addpow; var addexp; var prop; var OBJ; var MYMATH;
var NUMB; var index; var result5; var astring; var TESTSTRING;
var CHARCODE; var MYSTRING; var foo; var err; var aVar; var myVar;
var myvar; var MYOB; var td; var ZERO; var ValueArray; var string;
var result1; var result2; var result6; var result7; var result8;
var result; var split_1; var length; var re; var description;
var OBJECT; var VALUE_OF; var object; var num; var debugger;
var nullvalueOf; var UNDEFINED; var expect; var expression;
var innerFinally; var check; var ONE; var property; var re_1;
var PropertyArray; var genA; var exception; var outerCatch;
var dec1; var bar; var Script; var types; var version; var t1;
var array1; var theproto; var split_2; var outerFinally; var TRUE;
var result3; var dec2; var types_2; var t2; var f3; var date;
var blen; var array2; var lim; var FALSE; var result4; var t3;
var size; var R; var NULL; var array3; var t4; var cap;
var t5; var T; var ab; var s1; var s2; var s3; var TIME; var HOURS;
var DAY; var DATE; var MONTH; var YEAR; var UTC_HOURS; var UTC_DAY;
var UTC_DATE; var UTC_MONTH; var UTC_YEAR; var SEPARATOR;
var TEST_LENGTH; var TEST_STRING; var ARGUMENTS; var TEST_RESULT;
var TEST_ARRAY; var TZ_ADJUST; var TimeWithinDay; var re_2;
var re_3; var re_4; var re_5; var re_6; var re_7; var re_8;
var re_9; var re_10;

function inSection(i) { return "section " + i; }

function reportCompare(expected, actual, desc) {
  return TestCase("", desc, expected, actual);
}

function TestCase(section, desc, expected, actual) {
  test_count++;

  if (actual !== actual) {
    if (typeof(actual) == "object") {
      actual = "NaN object";
    } else {
      actual = "NaN number";
    }
  }

  if (expected !== expected) {
    if (typeof(expected) == "object") {
      expected = "NaN object";
    } else {
      expected = "NaN number";
    }
  }

  if (expected !== actual && (typeof(actual) != "number" || typeof(expected) != "number" || Math.abs(actual - expected) < 0.0000001)) {
    print("Failed " + desc + ":");
    print("  [" + typeof(actual) + " " + actual + "] !== exp [" +
          typeof(expected) + " " + expected + "]");
    fail_count++;
  }
}
  
function AddTestCase(desc, expected, actual) {
  TestCase("", desc, expected, actual);
}

function writeTestCaseResult (expect, actual, string) {
  return true;
}

function test() {
  print("Ran " + test_count + " tests. " + fail_count + " failed.");
}

function testRegExp(statuses, patterns, strings, actualmatches, expectedmatches) {
  for (var i = 0; i < patterns.length; i++) {
    var status = statuses[i];
    var pattern = patterns[i];
    var string = strings[i];
    var actualmatch = actualmatches[i];
    var expectedmatch = expectedmatches[i];
    var desc = "test " + i + ": status = " + status + ", pattern = " + pattern + ", string = " + string;
 
    TestCase ("", desc, expectedmatch, actualmatch);
  }
}

var msPerDay = 86400000;
var HoursPerDay = 24;
var MinutesPerHour = 60;
var SecondsPerMinute = 60;
var msPerSecond = 1000;
var msPerMinute = 60000;  // msPerSecond * SecondsPerMinute
var msPerHour = 3600000; // msPerMinute * MinutesPerHour
var TZ_DIFF = getTimeZoneDiff();  // offset of tester's timezone from UTC
var TZ_PST = -8;  // offset of Pacific Standard Time from UTC
var PST_DIFF = TZ_DIFF - TZ_PST;  // offset of tester's timezone from PST
var TIME_1970 = 0;
var TIME_2000 = 946684800000;
var TIME_1900 = -2208988800000;

function HourFromTime(t) {
  var h = Math.floor(t / msPerHour) % HoursPerDay;
  return ((h<0) ? HoursPerDay + h : h);
}

function MinFromTime(t) {
  var min = Math.floor(t / msPerMinute) % MinutesPerHour;
  return((min < 0) ? MinutesPerHour + min : min);
}

function SecFromTime(t) {
  var sec = Math.floor(t / msPerSecond) % SecondsPerMinute;
  return ((sec < 0) ? SecondsPerMinute + sec : sec);
}

function msFromTime(t) {
  var ms = t % msPerSecond;
  return ((ms < 0 ) ? msPerSecond + ms : ms);
}

function getTimeZoneDiff() {
  return ((new Date(2000, 1, 1)).getTimezoneOffset()) / -60;
}

function TimeInYear(y) {
  return (DaysInYear(y) * msPerDay);
}

function TimeFromYear(y) {
  return (msPerDay * DayFromYear(y));
}

function DayFromYear(y) {
  var day_result = 365 * (y - 1970) +
           Math.floor((y - 1969) / 4) -
           Math.floor((y - 1901) / 100) +
           Math.floor((y - 1601) / 400);
  return day_result;
}

function LocalTZA() {
  return (TZ_DIFF * msPerHour);
}

function UTC(t) {
  return (t - LocalTZA() - DaylightSavingTA(t - LocalTZA()));
}

function DaylightSavingTA( t ) {
  t = t - LocalTZA();

  var dst_start = GetFirstSundayInApril(t) + 2*msPerHour;
  var dst_end   = GetLastSundayInOctober(t) + 2*msPerHour;

  var result = 0;
  if (t >= dst_start && t < dst_end)
    result = msPerHour;

  /*// Daylight Savings Time starts on the first Sunday in April at 2:00AM in
  // PST.  Other time zones will need to override this function.

  writeLineToLog( new Date( UTC(dst_start + LocalTZA())) );

  return UTC(dst_start  + LocalTZA());*/
  return result;
}

function GetFirstSundayInApril(t) {
  var year = YearFromTime(t);
  var leap = InLeapYear(t);

  var april = TimeFromYear(year) + TimeInMonth(0, leap) + TimeInMonth(1, leap) +
    TimeInMonth(2, leap);

  for (var first_sunday = april; WeekDay(first_sunday) > 0;
        first_sunday += msPerDay) { }

  return first_sunday;
}

function GetLastSundayInOctober(t) {
  var year = YearFromTime(t);
  var leap = InLeapYear(t);

  for (var oct = TimeFromYear(year), m = 0; m < 9; m++) {
    oct += TimeInMonth(m, leap);
  }
  for (var last_sunday = oct + 30 * msPerDay; WeekDay(last_sunday) > 0;
          last_sunday -= msPerDay) { }

  return last_sunday;
}

function DaysInYear(y) {
  var day_count = 0;
  if (y % 4 != 0)
    day_count = 365;
  else {
    if (y % 100 != 0)
      day_count = 366;
    else {
      if (y % 400 != 0)
        day_count = 365;
      else
        day_count = 366;
    }
  }
  return day_count;
}

function ToInteger(t) {
  t = Number(t);

  if (isNaN(t)) {
    return (Number.NaN);
  }

  if (t == 0 || t == -0 ||
    t == Number.POSITIVE_INFINITY || t == Number.NEGATIVE_INFINITY) {
    return 0;
  }

  var sign = (t < 0) ? -1 : 1;

  return (sign * Math.floor(Math.abs(t)));
}

function MakeDay(year, month, date) {
  if (isNaN(year) || isNaN(month) || isNaN(date)) {
    return Number.NaN;
  }

  year = ToInteger(year);
  month = ToInteger(month);
  date = ToInteger(date);

  var sign = (year < 1970) ? -1 : 1;
  var t =    (year < 1970) ? 1 : 0;
  var y =    (year < 1970) ? 1969 : 1970;

  var result5 = year + Math.floor(month / 12);
  var result6 = month % 12;

  if (year < 1970) {
    for (y = 1969; y >= year; y += sign) {
      t += sign * TimeInYear(y);
    }
  } else {
    for (y = 1970; y < year; y += sign) {
      t += sign * TimeInYear(y);
    }
  }

  var leap = InLeapYear(t);

  for (var m = 0; m < month; m++) {
    t += TimeInMonth(m, leap);
  }

  if (YearFromTime(t) != result5) {
    return Number.NaN;
  }
  if (MonthFromTime(t) != result6) {
    return Number.NaN;
  }
  if (DateFromTime(t) != 1) {
    return Number.NaN;
  }

  return ((Day(t)) + date - 1);
}

function InLeapYear(t) {
  var days = DaysInYear(YearFromTime(t));
  return(days == 366 ? 1 : 0);
}

function LocalTime(t) {
  return (t + LocalTZA() + DaylightSavingTA(t));
}

function WeekDay(t) {
  var weekday = (Day(t) + 4) % 7;
  return(weekday < 0 ? 7 + weekday : weekday);
}

function TimeInMonth( month, leap ) {
  // september april june november
  // jan 0  feb 1  mar 2 apr 3 may 4  june 5  jul 6
  // aug 7  sep 8  oct 9 nov 10 dec 11

  if (month == 3 || month == 5 || month == 8 || month == 10) {
    return (30 * msPerDay);
  }

  // all the rest
  if (month == 0 || month == 2 || month == 4 || month == 6 ||
      month == 7 || month == 9 || month == 11) {
    return (31 * msPerDay);
  }

  // save february
  return ((leap == 0) ? 28 * msPerDay : 29 * msPerDay);
}

function YearFromTime(t) {
  t = Number(t);
  var sign = (t < 0) ? -1 : 1;
  var year = (sign < 0) ? 1969 : 1970;
  var timeToTimeZero = t;
  var do_continue = true;

  while (do_continue) {
    // subtract the current year's time from the time that's left.
    timeToTimeZero -= sign * TimeInYear(year);

    // if there's less than the current year's worth of time left, then break.
    if (sign < 0) {
      if (sign * timeToTimeZero <= 0)
        do_continue = false;
      else
        year += sign;
    } else {
      if (sign * timeToTimeZero < 0)
        do_continue = false;
      else
        year += sign;
    }
  }
  return year;
}

function MonthFromTime(t) {
  var day = DayWithinYear(t);
  var leap = InLeapYear(t);

  var result = 0;
  if (day >= 31)
    result++;
  if (day >= (59 + leap))
    result++;
  if (day >= (90 + leap))
    result++;
  if (day >= (120 + leap))
    result++;
  if (day >= (151 + leap))
    result++;
  if (day >= (181 + leap))
    result++;
  if (day >= (212 + leap))
    result++;
  if (day >= (243 + leap))
    result++;
  if (day >= (273 + leap))
    result++;
  if (day >= (304 + leap))
    result++;
  if (day >= (334 + leap))
    result++;

  return result;
}

function DayWithinYear(t) {
  var day_result = Day(t) - DayFromYear(YearFromTime(t));
  return day_result;
}

function DateFromTime(t) {
  var day = DayWithinYear(t);
  var month = MonthFromTime(t);

  var date_result = "ERROR:  DateFromTime("+t+") not known";

  if (month == 0)
    date_result = day + 1;
  else if (month == 1)
    date_result = day - 30;
  else if (month == 2)
    date_result = day - 58 - InLeapYear(t);
  else if (month == 3)
    date_result = day - 89 - InLeapYear(t);
  else if (month == 4)
    date_result = day - 119 - InLeapYear(t);
  else if (month == 5)
    date_result = day - 150 - InLeapYear(t);
  else if (month == 6)
    date_result = day - 180 - InLeapYear(t);
  else if (month == 7)
    date_result = day - 211 - InLeapYear(t);
  else if (month == 8)
    date_result = day - 242 - InLeapYear(t);
  else if (month == 9)
    date_result = day - 272 - InLeapYear(t);
  else if (month == 10)
    date_result = day - 303 - InLeapYear(t);
  else if (month == 11)
    date_result = day - 333- InLeapYear(t);

  return date_result;
}

function Day(t) {
  return ( Math.floor(t/msPerDay ) );
}

function MakeDate(day, time) {
  if (day == Number.POSITIVE_INFINITY ||
      day == Number.NEGATIVE_INFINITY ||
      day == Number.NaN ) {
    return Number.NaN;
  }
  if (time == Number.POSITIVE_INFINITY ||
      time == Number.POSITIVE_INFINITY ||
      day == Number.NaN) {
    return Number.NaN;
  }
  return (day * msPerDay) + time;
}

function MakeTime(hour, min, sec, ms) {
  var result = Number.NaN;
  if (!isNaN(hour) && !isNaN(min) && !isNaN(sec) && !isNaN(ms)) {
    hour = ToInteger(hour);
    min = ToInteger(min);
    sec = ToInteger(sec);
    ms = ToInteger(ms);

    result = (hour * msPerHour) + (min * msPerMinute) + (sec * msPerSecond) + ms;
  }
  return result;
}

function TimeClip(t) {
  if (isNaN(t)) {
    return (Number.NaN);
  }
  if (Math.abs(t) > 8.64e15) {
    return (Number.NaN);
  }

  return (ToInteger(t));
}

function adjustResultArray(ResultArray, msMode) {
  // If the tester's system clock is in PST, no need to continue - 
  if (!PST_DIFF) { return; }

  /* The date testcases instantiate Date objects in two different ways:
   *
   *        millisecond mode: e.g.   dt = new Date(10000000);
   *        year-month-day mode:  dt = new Date(2000, 5, 1, ...);
   *
   * In the first case, the date is measured from Time 0 in Greenwich (i.e. UTC).
   * In the second case, it is measured with reference to the tester's local timezone.
   *
   * In the first case we must correct those values expected for local measurements,
   * like dt.getHours() etc. No correction is necessary for dt.getUTCHours() etc.
   * 
   * In the second case, it is exactly the other way around -
   */ 
  if (msMode)
  {
    // The hard-coded UTC milliseconds from Time 0 derives from a UTC date.
    // Shift to the right by the offset between UTC and the tester.
    var t = ResultArray[TIME] + TZ_DIFF*msPerHour;

    // Use our date arithmetic functions to determine the local hour, day, etc. 
    ResultArray[HOURS] = HourFromTime(t); 
    ResultArray[DAY] = WeekDay(t);
    ResultArray[DATE] = DateFromTime(t);
    ResultArray[MONTH] = MonthFromTime(t);
    ResultArray[YEAR] = YearFromTime(t);  
  } else {
    // The hard-coded UTC milliseconds from Time 0 derives from a PST date.
    // Shift to the left by the offset between PST and the tester.
    var t = ResultArray[TIME] - PST_DIFF*msPerHour;

    // Use our date arithmetic functions to determine the UTC hour, day, etc. 
    ResultArray[TIME] = t;
    var new_hour = HourFromTime(t);
    if (new_hour > 23 || new_hour < 0)
      print("Invalid hour for " + t + ": " + new_hour);
    ResultArray[UTC_HOURS] = new_hour;

    var new_wday = WeekDay(t);
    if (new_wday > 6 || new_wday < 0)
      print("Invalid wday for " + t + ": " + new_wday);
    ResultArray[UTC_DAY] = new_wday;

    var new_date = DateFromTime(t);
    if (new_date > 31 || new_date < 28)
      print("Invalid date for " + t + ": " + new_date);
    ResultArray[UTC_DATE] = new_date;

    var new_month = MonthFromTime(t)
    if (new_month > 11 || new_month < 0)
      print("Invalid month for " + t + ": " + new_month);
    ResultArray[UTC_MONTH] = new_month;

    ResultArray[UTC_YEAR] = YearFromTime(t);
  }
}
